#include "BFS.h"
#include <cassert>
#include <cmath>

MyVector bfs(const MyVector& x)
{
	assert(x.size() == 10);
	
	return MyVector({
		cos(x[0] * x[1]) - exp(-3 * x[2]) + x[3] * x[4] * x[4] - x[5] - sinh(2 * x[7])*x[8] +
			2 * x[9] + 2.0004339741653854440,
		sin(x[0] * x[1]) + x[2] * x[6] * x[8] - exp(x[5] - x[9]) + 3 * x[4] * x[4] -
			x[5] * (x[7] + 1) + 10.886272036407019994,
		x[0] - x[1] + x[2] - x[3] + x[4] - x[5] + x[6] - x[7] + x[8] - x[9] -
			3.1361904761904761904,
		2 * cos(x[3] - x[8]) + x[4] / (x[0] + x[2]) - sin(x[1] * x[1]) +
			cos(x[6] * x[9])*cos(x[6] * x[9]) - x[7] - 0.1707472705022304757,
		sin(x[4]) + 2 * x[7] * (x[2] + x[0]) - exp(-x[6] * (x[5] - x[9])) + 2 * cos(x[1]) -
			1. / (x[3] - x[8]) - 0.3685896273101277862,
		exp(x[0] - x[3] - x[8]) + x[4] * x[4] / x[7] + cos(3 * x[1] * x[9]) / 2 - x[5] * x[2] +
			2.0491086016771875115,
		x[1] * x[1] * x[1] * x[6] - sin(x[9] / x[4] + x[7]) + (x[0] - x[5])*cos(x[3]) + x[2] -
			0.7380430076202798014,
		x[4] * (x[0] - 2 * x[5])*(x[0] - 2 * x[5]) - 2 * sin(x[2] - x[8]) + 1.5*x[4] -
			exp(x[1] * x[6] + x[9]) + 3.5668321989693809040,
		7. / x[5] + exp(x[4] + x[3]) - 2 * x[1] * x[7] * x[9] * x[6] + 3 * x[8] - 3 * x[0] -
			8.4394734508383257499,
		x[9] * x[0] + x[8] * x[1] - x[7] * x[2] + sin(x[3] + x[4] + x[5])*x[6] -
			0.78238095238095238096
	});
}

Matrix bfd(const MyVector& x)
{
	assert(x.size() == 10);

	return Matrix(
	{
		{
			-sin(x[0] * x[1])*x[1],
			-sin(x[0] * x[1])*x[0],
			3. * exp(-3. * x[2]),
			x[4] * x[4],
			2. * x[3] * x[4],
			-1.,
			0.,
			-2. * cosh(2. * x[7])*x[8],
			-sinh(2. * x[7]),
			2.
		},
		{
			cos(x[0] * x[1])*x[1],
			cos(x[0] * x[1])*x[0],
			x[8] * x[6],
			0.,
			6. * x[4],
			-exp(x[5] - x[9]) - x[7] - 1.,
			x[2] * x[8],
			-x[5],
			x[2] * x[6],
			exp(x[5] - x[9])
		},
		{
			1.,
			-1.,
			1.,
			-1.,
			1.,
			-1.,
			1.,
			-1.,
			1.,
			-1.
		},
		{
			-x[4] / (x[2] + x[0]) / (x[2] + x[0]),
			-2. * cos(x[1] * x[1])*x[1],
			-x[4] / (x[2] + x[0]) / (x[2] + x[0]),
			-2. * sin(x[3] - x[8]),
			1. / (x[2] + x[0]),
			0.,
			-2. * cos(x[6] * x[9])*sin(x[6] * x[9])*x[9],
			-1.,
			2. * sin(x[3] - x[8]),
			-2. * cos(x[6] * x[9])*sin(x[6] * x[9])*x[6]
		},
		{
			2. * x[7],
			-2. * sin(x[1]),
			2. * x[7],
			1. / (x[3] - x[8]) / (x[3] - x[8]),
			cos(x[4]),
			x[6] * exp(-x[6] * (x[5] - x[9])),
			-(x[9] - x[5])*exp(-x[6] * (x[5] - x[9])),
			2. * x[2] + 2. * x[0],
			-1. / ((x[3] - x[8])*(x[3] - x[8])),
			-x[6] * exp(-x[6] * (x[5] - x[9])),
		},
		{
			exp(x[0] - x[3] - x[8]),
			-(3. / 2.)*sin(3.*x[9] * x[1])*x[9],
			-x[5],
			-exp(x[0] - x[3] - x[8]),
			2.*x[4] / x[7],
			-x[2],
			0.,
			-(x[4] / x[7])*(x[4] / x[7]),
			-exp(x[0] - x[3] - x[8]),
			-(3. / 2.)*sin(3.*x[9] * x[1])*x[1]
		},
		{
			cos(x[3]),
			3.*x[1] * x[1] * x[6],
			1.,
			-(x[0] - x[5])*sin(x[3]),
			cos(x[9] / x[4] + x[7])*x[9] / (x[4] * x[4]),
			-cos(x[3]),
			x[1] * x[1] * x[1],
			-cos(x[9] / x[4] + x[7]),
			0.,
			-cos(x[9] / x[4] + x[7]) / x[4]
		},
		{
			2.*x[4] * (x[0] - 2.*x[5]),
			-x[6] * exp(x[1] * x[6] + x[9]),
			-2.*cos(x[2] - x[8]),
			1.5,
			(x[0] - 2.*x[5])*(x[0] - 2.*x[5]),
			-4.*x[4] * (x[0] - 2.*x[5]),
			-x[1] * exp(x[1] * x[6] + x[9]),
			0.,
			2.*cos(x[2] - x[8]),
			-exp(x[1] * x[6] + x[9]),
		},
		{
			-3.,
			-2.*x[7] * x[9] * x[6],
			0.,
			exp(x[3] + x[4]),
			exp(x[3] + x[4]),
			-7. / x[5] / x[5],
			-2.*x[7] * x[9] * x[1],
			-2.*x[1] * x[9] * x[6],
			3.,
			-2.*x[7] * x[1] * x[6]
		},
		{
			x[9],
			x[8],
			-x[7],
			cos(x[3] + x[4] + x[5])*x[6],
			cos(x[3] + x[4] + x[5])*x[6],
			cos(x[3] + x[4] + x[5])*x[6],
			sin(x[3] + x[4] + x[5]),
			-x[2],
			x[1],
			x[0]
		}
	});
}
